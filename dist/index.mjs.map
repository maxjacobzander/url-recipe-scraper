{"version":3,"sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import {\n  SchemaAuthor,\n  SchemaHowToSection,\n  SchemaHowToStep,\n  SchemaImageObject,\n  SchemaNutritionInformation,\n  SchemaRecipe,\n  SchemaVideoObject,\n} from 'schemaTypes'\nimport {\n  Author,\n  ImageObject,\n  NutritionInformation,\n  Recipe,\n  RecipeInstruction,\n  VideoObject,\n} from './types'\n\nexport const validateUrl = (input: string) => {\n  const urlRegex = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i\n  return urlRegex.test(input)\n}\n\nexport const validateHtml = (input: string) => {\n  const htmlRegex = /<([A-Za-z][A-Za-z0-9]*)\\b[^>]*>[\\s\\S]*?<\\/\\1>/gi\n  return htmlRegex.test(input)\n}\n\nexport const getScriptTags = (html: string) => {\n  const scriptTags = html.match(/<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi)\n  return scriptTags || []\n}\n\nexport const getApplicationLdJsonTags = (tags: string[]) => {\n  const applicationLdJsonTags = tags.filter((tag) =>\n    tag.includes('application/ld+json')\n  )\n  return applicationLdJsonTags\n}\n\nexport const parseTagData = (tags: string[]) => {\n  const schemaData = tags.map((tag) => {\n    const data = tag.match(/{[^]*}/)\n    return data ? JSON.parse(data[0]) : {}\n  })\n  return schemaData\n}\n\nexport const getRecipeSchemaData = (schemaData: any[]) => {\n  let recipeSchema: Recipe | null = null\n\n  schemaData.forEach((data) => {\n    if (data['@graph']) {\n      data['@graph'].forEach((graph: any) => {\n        if (graph['@type'] === 'Recipe') {\n          recipeSchema = graph\n        }\n      })\n    }\n\n    if (Array.isArray(data['@type'])) {\n      if (data['@type'].includes('Recipe')) {\n        recipeSchema = data\n      }\n    }\n\n    if (data['@type'] === 'Recipe') {\n      recipeSchema = data\n    }\n  })\n\n  return recipeSchema ? (recipeSchema as SchemaRecipe) : null\n}\n\nconst formatString = (str: string | undefined | null): string | undefined =>\n  typeof str === 'string' ? str.trim() : undefined\n\nconst formatStringOrArray = (input: string | string[] | undefined) => {\n  if (!input) return undefined\n\n  if (Array.isArray(input)) {\n    return input.map((str) => formatString(str))\n  }\n\n  return [formatString(input)]\n}\n\nconst getAuthors = (\n  schemaAuthors: SchemaAuthor | SchemaAuthor[] | undefined\n): Author[] | undefined => {\n  if (!schemaAuthors) return undefined\n\n  if (Array.isArray(schemaAuthors)) {\n    return schemaAuthors.map((author) => ({\n      '@id': author['@id'],\n      name: formatString(author.name),\n      url: author.url,\n    }))\n  }\n\n  return [\n    {\n      '@id': schemaAuthors['@id'],\n      name: formatString(schemaAuthors.name),\n      url: schemaAuthors.url,\n    },\n  ]\n}\n\nconst getImage = (\n  schemaImage: SchemaImageObject | undefined\n): ImageObject | undefined => {\n  if (!schemaImage) return undefined\n\n  return {\n    url: schemaImage.url,\n    height: schemaImage.height,\n    width: schemaImage.width ?? -1,\n  }\n}\n\nconst getVideo = (\n  schemaVideo: SchemaVideoObject | undefined\n): VideoObject | undefined => {\n  if (!schemaVideo) return undefined\n\n  return {\n    contentUrl: schemaVideo.contentUrl,\n    description: schemaVideo.description,\n    duration: schemaVideo.duration,\n    name: schemaVideo.name,\n    thumbnailUrl: schemaVideo.thumbnailUrl,\n    uploadDate: schemaVideo.uploadDate,\n  }\n}\n\nconst getNutrition = (\n  schemaNutrition: SchemaNutritionInformation | undefined\n): NutritionInformation | undefined => {\n  if (!schemaNutrition) return undefined\n\n  return {\n    calories: schemaNutrition.calories,\n    carbohydrateContent: schemaNutrition.carbohydrateContent,\n    cholesterolContent: schemaNutrition.cholesterolContent,\n    fiberContent: schemaNutrition.fiberContent,\n    proteinContent: schemaNutrition.proteinContent,\n    saturatedFatContent: schemaNutrition.saturatedFatContent,\n    sodiumContent: schemaNutrition.sodiumContent,\n    sugarContent: schemaNutrition.sugarContent,\n    fatContent: schemaNutrition.fatContent,\n    unsaturatedFatContent: schemaNutrition.unsaturatedFatContent,\n  }\n}\n\nconst getInstructions = (\n  schemaInstructions: SchemaHowToStep[] | SchemaHowToSection[] | undefined\n): RecipeInstruction[] | undefined => {\n  if (!schemaInstructions) return undefined\n\n  const instructions = schemaInstructions.map((instruction) => {\n    if ((instruction as SchemaHowToStep).text) {\n      const step = instruction as SchemaHowToStep\n      return {\n        text: formatString(step.text),\n        image: step.image?.map((img) => ({\n          url: img.url,\n          height: img.height,\n          width: img.width,\n        })),\n      }\n    }\n\n    const section = instruction as SchemaHowToSection\n    return {\n      name: formatString(section.name),\n      itemListElement: section.itemListElement?.map((step) => ({\n        text: formatString(step.text),\n        image: step.image?.map((img) => ({\n          url: img.url,\n          height: img.height,\n          width: img.width,\n        })),\n      })),\n    }\n  })\n\n  return instructions\n}\n\nexport const formatRecipeData = (schemaRecipeData: SchemaRecipe): Recipe => ({\n  authors: getAuthors(schemaRecipeData.author),\n  description: formatString(schemaRecipeData.description),\n  image: getImage(schemaRecipeData.image),\n  video: getVideo(schemaRecipeData.video),\n  name: formatString(schemaRecipeData.name),\n  nutrition: getNutrition(schemaRecipeData.nutrition),\n  recipeCategory: formatStringOrArray(schemaRecipeData.recipeCategory),\n  recipeCuisine: formatStringOrArray(schemaRecipeData.recipeCuisine),\n  recipeIngredient: formatStringOrArray(schemaRecipeData.recipeIngredient),\n  recipeInstructions: getInstructions(schemaRecipeData.recipeInstructions),\n  recipeYield: formatStringOrArray(schemaRecipeData.recipeYield),\n  cookTime: schemaRecipeData.cookTime,\n  prepTime: schemaRecipeData.prepTime,\n  totalTime: schemaRecipeData.totalTime,\n})\n","import {\n  formatRecipeData,\n  getApplicationLdJsonTags,\n  getRecipeSchemaData,\n  getScriptTags,\n  parseTagData,\n  validateHtml,\n  validateUrl,\n} from './utils'\n\n/**\n * Retrieves recipe data from a given URL.\n * @param input - The URL or HTML to fetch recipe data from.\n * @param config - Optional configuration for the fetch request.\n * @returns A promise that resolves to the recipe data.\n * @throws An error if no script tags or application/ld+json tags are found, or if no recipe data is found.\n */\nexport default async function getRecipeData(\n  input: string,\n  config: RequestInit = {}\n) {\n  let html: string | null = null\n\n  const validHtml = validateHtml(input)\n  if (validHtml) html = input\n\n  const validUrl = validateUrl(input)\n  if (validUrl) {\n    const response = await fetch(input, config)\n    html = await response.text()\n  }\n\n  if (!html) throw new Error('Invalid input')\n\n  const tags = getScriptTags(html)\n  if (tags.length === 0) throw new Error('No script tags found')\n\n  const applicationLdJsonTags = getApplicationLdJsonTags(tags)\n  if (applicationLdJsonTags.length === 0)\n    throw new Error('No application/ld+json tags found')\n\n  const parsedTagData = parseTagData(applicationLdJsonTags)\n  const recipeSchemaData = getRecipeSchemaData(parsedTagData)\n\n  if (!recipeSchemaData) throw new Error('No recipe data found')\n\n  const recipeData = formatRecipeData(recipeSchemaData)\n  return recipeData\n}\n\nexport * from './types'\n"],"mappings":"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","names":[]}